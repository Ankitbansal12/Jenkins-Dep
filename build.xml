<project name="Sample usage of Salesforce Ant tasks" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

 

    <property file="build.properties"/>

    <property environment="env"/>

 

    <!-- Setting default value for username, password and session id properties to empty string

         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}

         will be treated literally.

    -->

    <condition property="sf.username.qa" value=""> <not> <isset property="sf.username.qa"/> </not> </condition>

    <condition property="sf.password.qa" value=""> <not> <isset property="sf.password.qa"/> </not> </condition>

    <condition property="sf.username.dev" value=""> <not> <isset property="sf.username.dev"/> </not> </condition>

    <condition property="sf.password.dev" value=""> <not> <isset property="sf.password.dev"/> </not> </condition>

    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>

 

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">

        <classpath>

            <pathelement location="../ant-salesforce.jar" />                

        </classpath>

    </taskdef>
	
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="../ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
		<classpath>
			<pathelement location="../xmltask.jar"/>
		</classpath>
	</taskdef>
 

    <!-- Retrieve an unpackaged set of metadata from your org -->

    <!-- The file unpackaged/package.xml lists what is to be retrieved -->

    <target name="retrieveDev">

      <!-- Retrieve the contents into another directory -->

      <sf:retrieve username="${sf.username.dev}" password="${sf.password.dev}" serverurl="${sf.serverurl.dev}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieve" unpackaged="retrieve/package.xml"/>

    </target>

 

    <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged and run tests in this organization's namespace only-->

    <target name="deployQA">

      <sf:deploy username="${sf.username.qa}" password="${sf.password.qa}" serverurl="${sf.serverurl.qa}" maxPoll="${sf.maxPoll}" deployRoot="deploy" rollbackOnError="true"/>

    </target>

 

    <!-- Shows deploying code & running tests for code in directory -->

    <target name="deployCode">

      <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->

      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" testLevel="RunSpecifiedTests" rollbackOnError="true">

                 <runTest>SampleDeployClass</runTest>

      </sf:deploy>

    </target>

               

                <!-- Shows quick deployment of recent validation. Set the property sf.recentValidationId to your recent check only deployment Id -->

                <target name="quickDeploy">

                  <sf:deployRecentValidation  username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" recentValidationId="${sf.recentValidationId}"/>

                </target>

               

                <!-- Shows cancel deployment of deploy request either pending or in progress. Set property sf.requestId to Id of pending or in progress deploy request -->

                <target name="cancelDeploy">

                  <sf:cancelDeploy  username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" requestId="${sf.requestId}"/>

                </target>

 

                <!-- Retrieve the information of all items of a particular metadata type -->

    <target name="listMetadata">

      <sf:listMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" metadataType="${sf.metadataType}"/>

    </target>

 

                <!-- Retrieve the information on all supported metadata type -->

    <target name="describeMetadata">

      <sf:describeMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}"/>

    </target>

    <target name="gitDiff">
		<delete dir="${sf.deployDir}"/>
		<mkdir dir="${sf.deployDir}"/>
		<copy file="${sf.samplePackageXML}" tofile="${sf.deployDir}/package.xml"/>
		<echo message="Computing difference between the commits"/>
		<git command = "diff-tree">
			<args>
				<arg value="--no-commit-id"/>
				<arg value="--name-only"/>
				<arg value="--diff-filter=ACMRTUXB"/>
				<arg value="-t"/>
				<arg value="-r"/>
				<arg value="45d30ac5db6d2c9169ab9b559c962a1ecfa7f7f0"/>
				<arg value="cca3253b4c971dda3408a69addd2b282b1be31ae"/>
			</args>
		</git>
		<property name="diffFiles" value="${resultCommand}"/>
		<echo message="File differences between previous and current commits are"/>
		<for param="line" list="${diffFiles}" delimiter="${line.separator}">
		  <sequential>
			<if>
				<matches pattern="${sf.srcDirFile}" string="@{line}"/>
				<then>
					<echo message="@{line}"/>
					<echo message="Creating a copy of above file in deploy directory"/>
					<propertyregex
						property="destinationDir"
						input="@{line}"
						regexp="${sf.destDir}"
						select="\1"
						casesensitive="false"/>
					<propertycopy name="packageName" from="sf.${destinationDir}"/>
					<copy file="../@{line}" todir="${sf.deployDir}/${destinationDir}"/>
					<if>
						<matches string="${destinationDir}" pattern="${sf.generateMetaXML}"/>
						<then>
							<copy file="../@{line}-meta.xml" todir="${sf.deployDir}/${destinationDir}"/>
						</then>
					</if>
					<xmltask source="${sf.deployDir}/package.xml" dest="${sf.deployDir}/package.xml">
						<remove path="/Package/types[name/text()=${packageName}]"/>
						<insert path="//*[local-name()='Package']"> <![CDATA[
<types>
	<name>${packageName}</name>
	<members>*</members>
</types>
						]]>
						</insert>
					</xmltask>
				</then>
			</if>
		  </sequential>
		</for>
	</target>

	<macrodef name = "git">
		<attribute name = "command" />
		<attribute name = "dir" default = "../" />
		<element name = "args" optional = "true" />
		<sequential>
			<echo message = "git @{command}"/>
			<exec executable = "git" dir = "@{dir}" outputproperty = "resultCommand">
							<arg value = "@{command}" />
							<args/>
			</exec>
		</sequential>
	</macrodef>

</project>